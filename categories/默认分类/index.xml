<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>默认分类 - 分类 - 蓝狐狸的博客</title>
    <link>https://hugo.lanhuli.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/</link>
    <description>默认分类 - 分类 | 蓝狐狸的博客</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 20 Sep 2024 11:42:54 &#43;0800</lastBuildDate><atom:link href="https://hugo.lanhuli.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/" rel="self" type="application/rss+xml" /><item>
  <title>Linux开机启动执行脚本</title>
  <link>https://hugo.lanhuli.top/7cbcb56c25d8/</link>
  <pubDate>Fri, 20 Sep 2024 11:42:54 &#43;0800</pubDate>
  <author>蓝狐狸</author>
  <guid>https://hugo.lanhuli.top/7cbcb56c25d8/</guid>
  <description><![CDATA[方法 1：rc.local 文件位置在 /etc/rc.local。比较简单的方法，但是有些 linux 版本不支持，例如 debian 默认没有 rc.local 这个文件，但是有这个服务，并且这个服务是关闭的。
注意：/etc/rc.local 和/etc/rc.d/rc.local 区别在于，/etc/rc.local 是/etc/rc.d/rc.local 的软连接
1）使用方式 1 2 3 4 5 # 先赋予文件执行权限，有就不用了 chmod +x /etc/rc.d/rc.local # 查看是否有执行权限 ls -l /etc/rc.d/rc.local # 将想要执行的命令添加到 rc.local 文件末尾即可，也可以执行 .sh 文件 2）简单测试一下 先创建一个文件：touch /root/111.txt，在 rc.local 文件后面添加命令 /bin/echo &quot;abc11&quot; &gt; /root/111.txt，重启验证，查看命令是否执行。
重启后
3）debian 系统没有 rc.local 怎么办 debian 虽然默认没有 rc.local 这个文件，但是有这个服务，并且这个服务是关闭的。
手动创建 /etc/rc.local 文件，写入以下内容
1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!]]></description>
</item>
<item>
  <title>自建yum源和apt源</title>
  <link>https://hugo.lanhuli.top/d27d0995f4f9/</link>
  <pubDate>Wed, 18 Sep 2024 15:37:53 &#43;0800</pubDate>
  <author>蓝狐狸</author>
  <guid>https://hugo.lanhuli.top/d27d0995f4f9/</guid>
  <description><![CDATA[老版本 linux 系统的安装源都不维护消失了，没有源安装一些常用软件比较麻烦，可以使用 iso 镜像文件搭建简易安装源，安装常用软件包
参考文章：yum源的三种搭建方式，CentOS 使用iso镜像安装本地 yum 源 ，使用iso镜像设置Ubuntu系统本地apt源，Debian如何配置局域网APT软件仓库
yum 源：网络搭建 这里以 Centos7 为例
1）服务器上需要安装有 apache 或 nginx 等服务器，并可以正常访问，这里使用 nginx 为例，服务器 ip 为 192.168.0.211 网站目录为 /var/www/html/
2）上传 CentOS-7-x86_64-DVD-2009.iso 镜像到服务器上，然后在网站目录下新建一个文件夹，文件夹名随意。
1 mkdir /var/www/html/repo 3）将 iso 镜像挂载到创建的目录下 /var/www/html/repo
1 mount CentOS-7-x86_64-DVD-2009.iso /var/www/html/repo 挂载完成后，repo 目录下会多出一些文件
4）启动一台 Centos7 服务器，来到 /etc/yum.repos.d 目录下，删除这个目录下的所有文件，创建一个文件 http.repo，写入以下内容。
1 2 3 4 5 6 7 8 9 10 #yum仓库名，可自定义 [http] #yum仓库的描述信息 name=repo_for_http #yum源的网络访问地址。url链接不要填错 baseurl=http://192.168.0.211/repo/ #启用仓库 enabled=1 # 不进行红帽标签检查 gpgcheck=0 至于删除的那些文件的作用和内容，有兴趣可以自行百度或查看上述参考文章。]]></description>
</item>
<item>
  <title>博客迁移</title>
  <link>https://hugo.lanhuli.top/8f5c6a2be833/</link>
  <pubDate>Mon, 24 Jun 2024 00:42:28 &#43;0800</pubDate>
  <author>蓝狐狸</author>
  <guid>https://hugo.lanhuli.top/8f5c6a2be833/</guid>
  <description><![CDATA[从hexo转到hugo hugo的环境安装比hexo要简单，hugo下个二进制文件就行，hexo还要下载nodeJS和一堆npm包，而且下载的时候因为网络问题还慢，所以就换了hugo。
之前用hexo时用的主题是butterfly，配置起来挺简单，文档全，也挺好看的。换了hugo之后，找了不少主题，最终选择用了FixIt
FixIt主题很简洁，简单，够用，而且还有中文文档，上手挺快的。
Hugo常用命令
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 hugo version # 查看版本 hugo env # 版本和环境详细信息 # 创建项目 hugo new site hugo-demo # 会在当前文件夹下创建 hugo-demo 文件夹 ##### hugo-demo文件夹下的目录结构 ├─config.toml # 配置文件 ├─archetypes │ default.md ├─content # 存放博客和单页文章 ├─data # 存放其他数据 ├─layouts ├─public # 博客构建后的静态文件路径 ├─static # 用于存放静态资源 └─themes # 主题路径 ##### # 进入 hugo-demo 文件夹 hugo new posts/my-first-post.]]></description>
</item>
<item>
  <title>xss盲打平台bluelotus搭建</title>
  <link>https://hugo.lanhuli.top/e4880266d50b/</link>
  <pubDate>Sat, 17 Feb 2024 03:38:13 &#43;0800</pubDate>
  <author>蓝狐狸</author>
  <guid>https://hugo.lanhuli.top/e4880266d50b/</guid>
  <description><![CDATA[项目地址： https://github.com/firesunCN/BlueLotus_XSSReceiver
自己做成了一个 docker 镜像，可以直接使用。
1 2 3 4 docker pull bluefoxqaq/bluelotus_xss_docker:2.0 # 这里映射宿主机的80端口，其它端口有问题，admin.php页面会不断刷新。80端口就没事 docker run -d -p 80:80 -it --name=bluelotus bluefoxqaq/bluelotus_xss_docker:2.0 # 访问ip:80即可 登录时需要完整的地址，例如：http://ip/login.php ，这个login.php不会自动添加。
镜像制作过程
下载所需要的文件，解压后是个名为 xcc 的文件夹，进入 xcc 文件夹，运行 docker build 命令
1 docker build -f ./Dockerfile -t bluelotus_docker:1.0 . # 注意后面的点号 所需文件下载地址：xcc.zip
其中 Dockerfile 文件内容如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 FROM debian:9.]]></description>
</item>
<item>
  <title>win10关闭自动更新</title>
  <link>https://hugo.lanhuli.top/0c18f16dae35/</link>
  <pubDate>Fri, 06 Oct 2023 03:09:41 &#43;0800</pubDate>
  <author>蓝狐狸</author>
  <guid>https://hugo.lanhuli.top/0c18f16dae35/</guid>
  <description><![CDATA[关闭 win 10 (专业版) 系统更新，只在专业版win10测试过可行。其它版本不清楚。
打开组策略，按图找到 Windows 更新。
有三个配置需要更改
1）配置自动更新：禁用掉
2）指定 Intranet Microsoft 更新服务位置：启用，修改网址。
3）不要连接任何 Windows 更新 Intranet 位置：启用
三个选项设置好后，更新就会因无法联网而终止。记得重启]]></description>
</item>
<item>
  <title>设置虚拟机静态ip保持不变</title>
  <link>https://hugo.lanhuli.top/4013e4eb4949/</link>
  <pubDate>Thu, 05 Oct 2023 14:07:30 &#43;0800</pubDate>
  <author>蓝狐狸</author>
  <guid>https://hugo.lanhuli.top/4013e4eb4949/</guid>
  <description><![CDATA[设置虚拟机静态ip保持不变 宿主机更换网络后，ip 地址变动，同时虚拟机也会变动 ip 地址，如果是笔记本的话，频繁更换网络导致虚拟机地址也要频繁修改，很麻烦。
虚拟机在桥接模式下，通过 dhcp 获得一个和宿主机同网段的一个 ip，二者可以互通，可以正常访问互联网。但是如果宿主机换了一个网络，例如从 192.168.31.96 变成了 192.168.32.196，那么虚拟机的 ip 地址也要变为同 32 网段的 ip 地址才可以进行互通和上网。每次宿主机切换网络，虚拟机的地址也要跟着变动，这很麻烦，因为每次都有重新确认虚拟机新分配的 ip 地址。
我希望虚拟机的 ip 地址不变，同时还可以正常互通和上网。无论宿主机如何切换网络，虚拟机的地址永远都不会变动。
实际操作 有两台主机，宿主机和虚拟机处于同一网络，ip 地址如下（桥接模式）
宿主机 ip：192.168.31.96
虚拟机 ip：192.168.31.64
二者之间正常通信，且均可以访问互联网。如下图
现在，我们想要切换网络时保持虚拟机的ip地址不变动，进行以下设置
点击 VMware 的编辑-虚拟网络编辑器，点击更改设置。
点击添加网络
添加一个网络，这里我用的 VMnet17，点击确定。
取消勾选 DHCP 服务，同时将子网段设一个你想要的值，这里使用了 17 网段，点击确定即可。
打开笔记本宿主机的网络设置，可以看到新添加的 VMnet17 网卡
选择无线网卡，右键-属性-共享-选择 VMnet17，点击确定
点击确定后有一个弹窗，点击是，他会将 VMnet17 网卡改为 137 网段，我们需要将它改为 17 网段，就是自定义的网段。
将 VMnet17 网卡改为如下所示，将 137 改为 17，添加 dns。点击确定
将虚拟机的网络连接改为自定义，启动虚拟机。
配置虚拟机的 ip 地址：192.168.17.100，子网掩码，网关（VMnet 17 网卡的地址192.168.17.1）和 dns（同 192.168.17.1 就可以了）。保存即可]]></description>
</item>
<item>
  <title>关于token的一些记录</title>
  <link>https://hugo.lanhuli.top/e08af3f827e9/</link>
  <pubDate>Sun, 01 Oct 2023 12:10:40 &#43;0800</pubDate>
  <author>蓝狐狸</author>
  <guid>https://hugo.lanhuli.top/e08af3f827e9/</guid>
  <description><![CDATA[前段时间偶然看到一篇关于accessToken和refreshToken的讨论帖，了解到了这两个Token的区别，还顺带了解了一些关于OAuth2.0标准的内容，简单记录一下，方便后面复习。本文只是写给我自己看的，因为我也是根据网上的文章自己总结的，可能有误，可以直接去看网上写得更详细的文章
Cookie、Session和Token 参考文章：一文讲透Token与Cookie、Session的区别
为啥会有这几个东西呢，是因为http协议是无状态的协议，两个http请求之间没有联系，假如有很多个http请求，我们该如何区分这些个请求是属于哪个用户的，这就用到了我们提到的Cookie、Session和Token这些东西了。其实Cookie、Session、Token就是一个身份标识，通过这个身份标识，来区分http请求。
Cookie、Session和Token这三者的工作原理、区别、优缺点推荐看我上面参考的那篇文章，写得很好，或者自行百度。
关于Token jwt：jwt只是实现Token的一种方式，你也可以用其他的方式来实现Token。例如对称加密算法或自研的加密算法。
accessToken和refreshToken是为了解决token在实际使用中的一些问题。关于这二者可以参考：Access Token 与 Refresh Token或自行百度
accessToken：一个临时的token，有效时间很短，就是我们用来访问服务器资源所使用的那个token。
refreshToken：用来刷新accessToken的。当accessToken过期或者快要过期的时候，会用refreshToken向服务器获取一个新的accessToken。
为啥要用两个Token呢，这多麻烦啊。我在知乎上看到这个帖子jwt续签为什么要使用双token,没看明白啊，感觉单个token也可以啊?，或许可以解答这个疑惑。
以下是我自己的理解：
1）单独一个Token是可以的（也就是accessToken），token过期后，让用户在重新登录，在给他一个不就好了。这样的话，就需要把token的有效时间设置的长一点，不然用户老是频繁登录很影响使用体验。要避免频繁登录的话，就需要使用到refreshToken了。当accessToken过期后，使用refreshToken重新获取accessToken，将accessToken刷新，这样用户就不用登录了。所以refreshToken的有效时间大于accessToken的有效时间才行。
2）关于安全方面问题，双token这个东西是在OAuth2.0标准中所用到的。*如果只是在用户（客户端）和服务端两者之间使用的话，它并没有安全防护的作用，或者说，它并不是为了解决token安全问题而被使用的，它是为了解决用户频繁登录而被使用的。*但如果是在OAuth2.0标准中，它确实是为了解决安全问题而被使用的，但它不是解决token的安全问题，而是解决安全授权问题，例如我们常用的第三方登录。
关于OAuth 建议自行百度看看什么是OAuth标准，推荐：白话让你理解什么是oAuth2协议和非常详细！深入理解OAuth原理和实践细节两篇文章，写得很好。
画了个简单的图
这个授权流程在OAuth 2中被称为授权码模式（authorization code grant），其命名的原因是，应用程序使用授权码来向授权服务器申请访问令牌/刷新令牌。
有几点需要注意：
1）第三方授权服务器给的token令牌就是：accessToken和refreshToken
2）refreshToken可以获取新的accessToken，所以为了安全，refreshToken一般只在服务器之间使用安全的https进行传递。怎么个意思呢，就是应用APP那里其实是两个部分，一个是APP的客户端（前端），一个是APP的后端，它们之间的请求是APP前端-APP后端-授权服务器，refreshToken自授权服务器传递到APP后端服务器上，就不往APP客户端传了，降低refreshToken被泄露的风险。
OAuth2.0有四种模式，最主要的还是授权码模式，其它三种感觉只是变了变主体，还是同一个思路。理解授权码模式就可以了。
其实整个应用码授权模式还有很多知识没有详细说明，比如3.2中app的认证信息是什么，如何具体实现这个流程，有哪些条件等等，建议看看非常详细！深入理解OAuth原理和实践细节这篇文章，利用第三方github登录详细解释了整个过程，值得一看。我就是看这个明白的。
最后 以上内容比较粗糙，因为我只是记个大概就行，真要详细去学的话还是去看看RFC文档或者其他人的文章吧。
参考文章：
https://zhuanlan.zhihu.com/p/625995458
https://www.cnblogs.com/blowing00/p/4524132.html
https://www.zhihu.com/question/506320859/answer/2913603859
https://zhuanlan.zhihu.com/p/92051359
https://zhuanlan.zhihu.com/p/380561372
https://www.cnblogs.com/Nyan-Workflow-FC/p/11082590.html]]></description>
</item>
<item>
  <title>zsh的安装和配置</title>
  <link>https://hugo.lanhuli.top/13a9176d44b5/</link>
  <pubDate>Mon, 31 Jul 2023 12:54:21 &#43;0800</pubDate>
  <author>蓝狐狸</author>
  <guid>https://hugo.lanhuli.top/13a9176d44b5/</guid>
  <description><![CDATA[安装zsh（Debian10） 查看当前 shell：echo $SHELL
查看系统中安装了哪些 shell：cat /etc/shells
切换 shell 环境：chsh -s /bin/zsh
安装：apt install zsh
安装 zsh 插件 zsh-autosuggestions：这个是自动建议插件，能够自动提示你需要的命令。根据历史命令提示 zsh-syntax-highlighting：这个是代码高亮插件，能够使你的命令行各个命令清晰明了。 zsh-completions：命令自动补全。感觉不是很好用，看个人情况，不推荐安装。 1 2 3 4 5 6 7 8 git clone https://github.com/zsh-users/zsh-autosuggestions /usr/local/zsh-plugins/zsh-autosuggestions # 自动补全 git clone https://github.com/zsh-users/zsh-syntax-highlighting /usr/local/zsh-plugins/zsh-syntax-highlighting # 语法高亮 git clone --depth=1 https://github.com/zsh-users/zsh-completions.git /usr/local/zsh-completions # 命令选项自动补齐，不太好使 # 我fork的仓库，使用ssh连接 git clone git@github.com:BluefoxQAQ/zsh-autosuggestions.git /usr/local/zsh-plugins/zsh-autosuggestions git clone git@github.com:BluefoxQAQ/zsh-syntax-highlighting.git /usr/local/zsh-plugins/zsh-syntax-highlighting git clone git@github.com:BluefoxQAQ/zsh-completions.git /usr/local/zsh-completions zsh的配置 这是我目前正在使用的zsh配置文件，可以直接复制使用
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 # PS1=&#39;[\[\e[1;35;1m\]\t \[\e[1;32;1m\]\u@\H \[\e[1;33;1m\]\w] \n \$ \[\e[1;37;1m\]&#39; # 废弃，不好看 # PS1=&#39;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &#39; # bash用这个 # export PS1=&#34;%10F%m%f:%11F%1~%f \$ &#34; # zsh用这个 # export PS1=&#39;%F{#00ffff}%B%n@%m%b%f:%B%F{#00afff}%~%f%#%b &#39; # zsh用这个 # export PS1=$&#39;%F{#00ffff}%B%n@%m%b%f:%B%F{#00afff}%~%f%b\n&gt;%# &#39; # zsh用这个 export PS1=$&#39;%F{#00ffff}%B%n@%m%b%f:%B%F{#00afff}%~%f%b\n %F{#ffff00}&gt;%#%b%f &#39; # zsh用这个,双行 alias ls=&#39;ls --color&#39; alias grep=&#39;grep --color=auto&#39; export GREP_COLOR=&#34;1;31&#34; export LS_COLORS=&#39;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.]]></description>
</item>
<item>
  <title>java swing学习</title>
  <link>https://hugo.lanhuli.top/e70c6a493b0d/</link>
  <pubDate>Sun, 30 Jul 2023 03:18:10 &#43;0800</pubDate>
  <author>蓝狐狸</author>
  <guid>https://hugo.lanhuli.top/e70c6a493b0d/</guid>
  <description><![CDATA[Swing包括了图形用户界面（GUI）器件如：文本框，按钮，分隔窗格和表。我在学习Swing时遇到了许多困惑，在这里记录一下，以便后续回顾。
JFrame和JPanel详解 刚学习的时候，跟着老师敲，但没有理解这两个东西，导致后面一直搞不清楚Swing的逻辑，查了些资料，现在有点明白了。
举一个不太准确的例子：假设Swing编程就像是我们在画画，我们画的圆圈，方块，文字就相当于Swing中的一个个组件。JFrame相当于一块透明的玻璃板，我们是没有办法在上面直接画画，JPanel相当于一张白纸，把这张白纸放到玻璃板上，就可以在纸上画出圆圈，方块和文字了。
JFrame是不能直接放置组件的，因为JFrame 不是一个容器，它只是一个框架。JFrame 有一个 Content Pane，窗口能显示的所有组件都是添加在这个 Content Pane 中。JFrame 提供了两个方法：getContentPane 和 setContentPane 就是用于获取和设置其 Content Pane 的。
先说setContentPane方法，常见于这样写：建立一个Jpanel中间容器，把组件添加到容器中，用setContentPane方法把该容器置为JFrame的内容面板
1 2 3 4 5 6 7 8 9 10 11 12 13 public class MyFrame3 extends JFrame { public MyFrame3(String tittle) { super(tittle); //创建一个面板，作为容器绑定到窗口上，这是不可见的 JPanel jPanel = new JPanel(); this.setContentPane(jPanel); JButton button = new JButton(&#34;按钮&#34;); jPanel.add(button); this.setVisible(true); // 设置可见 } } 再说说getContentPane方法，常见于这样写：不用建立中间容器，直接用getContentPane().add()方式添加组件。getContentPane是得到了jframe的内容面板。
1 2 3 4 5 6 7 public class TestFrame extends JFrame{ public TestFrame() { JLabel label = new JLabel(&#34;lableTest&#34;); getContentPane().]]></description>
</item>
<item>
  <title>博客网站搭建</title>
  <link>https://hugo.lanhuli.top/443889da05ee/</link>
  <pubDate>Sun, 23 Jul 2023 22:14:15 &#43;0800</pubDate>
  <author>蓝狐狸</author>
  <guid>https://hugo.lanhuli.top/443889da05ee/</guid>
  <description><![CDATA[安装部署 安装NodeJs：https://nodejs.org/en/download
安装Git：https://git-scm.com/download/win
安装hexo，输入以下命令
1 2 3 4 npm install hexo-cli -g # 安装hexo脚手架 hexo init blog # blog是自定义文件夹名字 cd blog hexo server # 启动hexo 注意：网络问题可能有点慢。
安装插件（看个人情况安装）
1 2 3 4 5 6 7 8 npm install hexo-renderer-pug hexo-renderer-stylus --save # 必须安装，不然无法运行，会报错 npm install https://github.com/BluefoxQAQ/hexo-asset-image.git --save # 插入图片用的插件 npm install hexo-generator-search --save # 安装搜索插件 # 主题使用本地静态js，cdn配置相关，可选。需要和主题版本最新，否则可能报错。见下文butterfly主题配置cdn npm install hexo-butterfly-extjs --save npm install hexo-deployer-git --save # 安装github部署插件 npm install hexo-deployer-ftpsync --save # 安装FTP部署插件 npm install https://github.]]></description>
</item>
</channel>
</rss>
